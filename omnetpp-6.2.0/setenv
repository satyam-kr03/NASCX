#!/usr/bin/env -S sh -c "echo >&2 \"Error: You are running this script instead of sourcing it. Make sure to use it as 'source setenv' or '. setenv', otherwise its settings won't take effect.\"; exit 1"

# first argument can be (e.g. 'source setenv -q'):
# -q : do not show banner text on configuration success
# -r : remove an already configured environment

# Get the directory where this script reside using a trick (works differently on bash and zsh)
# On bash, the current script's name is in 'BASH_SOURCE[0]'
if [ "$BASH_VERSION" != "" ]; then # for BASH
  dir=$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)
elif [ "$ZSH_VERSION" != "" ]; then # on zsh the script name is in '$0'
  dir=$(cd $(dirname $0) && pwd)
else # other shells are not supported, because we use variable manipulation constructs that are not part of POSIX
  echo "Error: Unrecognized shell, only bash and zsh are supported."
  return 1
fi

# check if dir is really pointing to an omnet++ installation dir
if [ ! -f "$dir/configure.user" -o ! -f "$dir/include/omnetpp.h" -o ! -f "$dir/Version" ]; then
    echo "Error: '$dir' does not look like an OMNeT++ root directory"
    return 1
fi

# Activate local python virtual environment if present in the root directory.
# You can create a virtual environment with 'python3 -m venv .venv'
# and then install all required packages with 'python3 -m pip install -r python/requirements.txt'
#
# NOTE: the bin/activate script directly sets the PATH variable to a value saved during
# an earlier run of the script to restore the PATH to that state. This may overwrite any
# changes made to the PATH since the last run. Because of this it is EXTREMELY important
# NOT to modify the PATH in the 'setenv' script before activating the virtual env.
# In short, this activation MUST BE at the very beginning of the 'setenv' script.
#
if [ -f "$dir/.venv/bin/activate" ] ; then
  if [ "$1" != "-q" ]; then
    echo "Activating python virtual environment in '$dir/.venv'"
  fi
  source $dir/.venv/bin/activate
fi

# check for HOMEBREW (on macOS) environment and activate dependent packages 
# (Unless we are in a nix shell... In that case the environment should already be set up
# and brew should not be used at all)
if [ "$(uname)" = "Darwin" -a "$(command -v brew)" != "" -a -z "$IN_NIX_SHELL" ]; then
  echo "HOMEBREW detected, activating dependencies (qt@6, bison, flex, pkg-config, make)."
  export PATH="$(brew --prefix qt@6)/bin:$PATH"
  export PATH="$(brew --prefix bison)/bin:$PATH"
  export PATH="$(brew --prefix flex)/bin:$PATH"
  export PATH="$(brew --prefix pkg-config)/bin:$PATH"
  export PATH="$(brew --prefix make)/libexec/gnubin:$PATH"
  export LDFLAGS="-L$(brew --prefix)/lib $LDFLAGS"
  export CFLAGS="-isystem $(brew --prefix)/include $CFLAGS"
fi

function _numargs() { echo $#; }
if [ $(_numargs $dir) -gt 1 ]; then
    echo "Error: Directory name ($dir) must not contain spaces or special characters."
    return 1
fi

# utility functions for path manipulation
opp_path_remove()
{
    [[ -z $2 ]] && return 2
    local value=":$1:"
    value=${value//:$2:/:}
    value=${value#:}
    value=${value%:}
    echo $value
}

opp_path_cleanup()
{
    for varname in "$@"; do
      local value=$(eval echo \$$varname)  # note: we use eval because '${!varname}' works only in bash, and '${(P)varname}' works only in zsh
      while [[ $value == *::* ]] ; do
          value=${value//::/:}
      done
      value=${value#:}
      value=${value%:}
      export $varname="$value"
    done
}

# remove previous environment to prevent the accumulation of path elements
if [ -n "$__omnetpp_root_dir" ]; then
  if [ "$1" = "-r" ]; then
    echo "Removed previous environment for '$__omnetpp_root_dir'."
    dir=
  else
    echo "Warning: overwriting previous environment for '$__omnetpp_root_dir'."
  fi
  export PATH=$(opp_path_remove "$PATH" "$__omnetpp_root_dir/bin")
  export PYTHONPATH=$(opp_path_remove "$PYTHONPATH" "$__omnetpp_root_dir/python")
  export OMNETPP_IMAGE_PATH=$(opp_path_remove "$OMNETPP_IMAGE_PATH" "$__omnetpp_root_dir/images")
  export __omnetpp_root_dir=
  export OMNETPP_RELEASE=
  export QT_SELECT=
  export QT_LOGGING_RULES=
fi

# do not continue if removal was requested
if [ "$1" = "-r" ]; then
    return 0
fi

# macOS specific settings
if [ $(uname) = "Darwin" ]; then
  if [ $(uname -m) = "arm64" ]; then
    if [ -d $dir/tools/macos.x86_64 ]; then
      echo "NOTE: We are running on Apple Silicon, but you have downloaded the x86_64 version of the installation package!"
      echo "Turning on x86_64 emulation by starting a new shell with 'arch -x86_64 /bin/zsh -i' ..."
      export dir; arch -x86_64 /bin/zsh -c 'source $dir/setenv; zsh -i'
      return 1
    fi
    if [ -d $dir/tools/macos.aarch64 ]; then
      TOOLS_DIR=$dir/tools/macos.aarch64
      export PATH=$TOOLS_DIR/bin:$PATH
    fi
  else
    if [ -d $dir/tools/macos.x86_64 ]; then
      TOOLS_DIR=$dir/tools/macos.x86_64
      export PATH=$TOOLS_DIR/bin:$PATH
    fi
  fi
fi

# Windows/MinGW specific settings
if [ "$MSYSTEM" = "MINGW64" ] ; then
  export PYTHONPATH=
  if [ "$VCToolsInstallDir" = "" ] ; then
    export PATH="/opt/mingw64/bin:$PATH"
  else
    export PATH="/opt/visualc/bin:$(cygpath "$VCToolsInstallDir/bin/HostX64/x64"):$PATH"
  fi
fi

export PATH="$dir/bin:$PATH"
export PYTHONPATH="$dir/python:$PYTHONPATH"
export OMNETPP_IMAGE_PATH="$dir/images:$OMNETPP_IMAGE_PATH"
export HOSTNAME
export HOST
export QT_SELECT=6 # on systems with qtchooser, switch to Qt6
export QT_LOGGING_RULES='*.warning=false;qt.qpa.*=false' # disable some qt logging

export OMNETPP_RELEASE=$(cat $dir/Version)
export __omnetpp_root_dir=$dir
dir=

if [ "$1" != "-q" ]; then
  echo "Environment for '$OMNETPP_RELEASE' in directory '$__omnetpp_root_dir' is ready."

  if [ ! -f $__omnetpp_root_dir/Makefile.inc ]; then
  cat <<__END__

Type "./configure" and "make" to build the simulation libraries.
When done, type "omnetpp" to start the IDE.
__END__
  fi
fi

# source user specific script if present
if [ -f "$__omnetpp_root_dir/setenv_local" ] ; then
  source $__omnetpp_root_dir/setenv_local
fi

# Mingw doesn't like extra colons in paths, so remove them using a shell function
opp_path_cleanup PATH PYTHONPATH OMNETPP_IMAGE_PATH

