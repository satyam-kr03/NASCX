#!/usr/bin/env python3
#
# Creates a makefile for a given OMNeT++/OMNEST model.
# Assumes that .ned, .msg, .cc and .h files are in one directory (or directory tree).
# The name of the program defaults to the name of the directory ('myproject').
#
# Author: Andras Varga
#

import os
import re
import sys
import argparse
import glob
from typing import List, Dict, Any
from builtins import isinstance
from configparser import ConfigParser
import subprocess

progname = sys.argv[0]

def makemake():
    parser = argparse.ArgumentParser(
        prog = 'makemake',
        description = "Create a Makefile for an OMNeT++/OMNEST model, based on source files in current directory",
        epilog = """The default output is Makefile, which you can invoke by typing "make". The contents of the "makefrag" file will be included into the generated makefile, letting you to override the default target, change variables, etc."""
    )

    parser.add_argument('extra_args', metavar="object files and libraries", nargs="*", help="""Arguments will simply get added to the linker (or librarian) command line. Thus, wildcards and macros are accepted, and will be resolved at build time. Useful macros are $O (the output location of this makefile), $(PROJECT_OUTPUT_PATH) and $(CONFIGNAME); see the generated makefiles for more. On Unix you need to single-quote them ('$O') gainst getting resolved prematurely by the shell.""")
    parser.add_argument('-f', '--force', action='store_true', help="""Force overwriting the existing Makefile.""")
    parser.add_argument('-e', '--ext', metavar="EXT", dest="cc_ext", help="""C++ source file extension, usually "cc" or "cpp". By default, this is determined by looking at existing files in the directory.""")
    parser.add_argument('-o', '--output', metavar="FILENAME", dest="target", help="""Name of simulation executable or library to be built. Defaults to the project name.""")
    parser.add_argument('-O', '--out', metavar="DIRECTORY", dest="out_dir", help="""Specifies the name of the output directory tree for out-of-directory build; defaults to "out". The actual output directory will be <projectroot>/<dir>/$(CONFIGNAME)/<subpath>, where <subpath> is the project-relative path of the current directory (for <projectroot> see -P). An absolute directory path can also be specified, resulting in <absolute-dir>/$(CONFIGNAME)/<subpath>.""")
    parser.add_argument('--deep', dest="is_deep", action='store_true', help="""Generates a "deep" Makefile. A deep Makefile will cover the whole source tree under the make directory, not just files in that directory. Directories may be excluded using -X. The include path will contain all directories in the source tree. Deep is not compatible with -r (recursive make), but -d (directory to recurse into) can still be used.""")
    parser.add_argument('-r', '--recurse', action='store_true', help="""Causes make to recursively descend into all subdirectories; subdirectories are expected to contain makefiles themselves. If you need to maintain a specific order, declare dependencies in the makefrag(.vc) file. Subdirectories may be excluded using -X. See also -d.""")
    parser.add_argument('-X', '--except', metavar="DIRECTORY", dest="except_subdirs", action="append", default=[], help="""With -r and --deep option: ignore the given directory. If the argument is a relative path, it is interpreted as relative to the current directory. Wildcards (like -X *_backups or -X */tmp) are accepted.""")
    parser.add_argument('-d', '--subdir', metavar="DIRECTORY", dest="submake_dirs", action="append", default=[], help="""Causes make to recursively descend into the given directory. The directory does not need to be the child of the make directory. When used with --deep, -d also implies -X for that directory.""")
    parser.add_argument('-P', '--projectdir', metavar="DIRECTORY", dest="project_dir", help="""Specifies the project root directory. Any absolute path (-I, -L, object file names, etc.) that points into the project's subtree will be converted to relative, to ease compiling the project in a different directory. Defaults to first ancestor directory that contains a ".project" file.""")
    parser.add_argument('-M', '--mode', metavar="MODE", help="""Selects the build mode, "debug" or "release". Defaults to "debug". This setting can still be overridden on the make command line, by specifying "MODE=debug" or "MODE=release" as an extra argument.""")
    parser.add_argument("-D", "--define", metavar="NAME[=VALUE]", dest="defines", action="append", default=[], help="""Preprocessor symbol to be passed to the C++ compiler.""")
    parser.add_argument("-K", "--makefile-define", metavar="NAME=VALUE", dest="makefile_variables", action="append", default=[], help="""Defines a makefile variable, i.e. causes the NAME=VALUE line to be inserted into the makefile.""")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-n", "--nolink", dest="type", action="store_const", const="NOLINK", default="EXE", help="""Produce object files but do not create executable or library. Useful for models with parts in several directories. With this option, -u and -l have no effect.""")
    group.add_argument("-s", "--make-so", dest="type", action="store_const", const="SHAREDLIB", help="""Build shared library (.so or .dll). Useful if you want to load the model dynamically (via the load-libs= omnetpp.ini or the -l Cmdenv/Qtenv command-line option).""")
    group.add_argument("-a", "--make-lib", dest="type", action="store_const", const="STATICLIB", help="""Create static library (.a or .lib).""")
    parser.add_argument("-S", "--fordll", dest="compile_for_dll", action="store_true", help="""Compile C++ files for use in DLLs; see -p option. The -s (build shared library) option implies this one.""")
    parser.add_argument("-u", "--userinterface", metavar="NAME", dest="user_interface", default="", help="""Selects the user interface libraries to link with. Possible values are "all", "Cmdenv", "Qtenv". Defaults to "all".""")
    parser.add_argument("-I", metavar="DIRECTORY", dest="include_dirs", action="append", default=[], help="Additional C++ include directory")
    parser.add_argument("-L", metavar="DIRECTORY", dest="library_dirs", action="append", default=[], help="Add a directory to the library path")
    parser.add_argument("-l", metavar="LIB", dest="libraries", action="append", default=[], help="""Additional library to link against. On Unix, -lfoo will link with libfoo.so or libfoo.a; on Windows, with foo.lib. The library path (see -L) will be searched in both cases.""")
    parser.add_argument("-p", "--symbol", metavar="NAME", dest="dll_symbol", help="""The DLL export/import symbol. It will cause the -P<symbol>_API option to be added to opp_msgtool invocations. Also, if target is a DLL or --fordll is specified, the <symbol>_EXPORT macro will be passed to the compiler; the source code is expected to be set up so that dll-public declarations are annotated with <symbol>_API, and <symbol>_EXPORT causes <symbol>_API to be defined as __declspec(dllexport).""")
    parser.add_argument("-i", "--includefragment", metavar="FILENAME", dest="fragment_files", action="append", default=[], help="""Include the specified makefile fragment into the generate makefile. If a file named "makefrag" exists, it is automatically used if no -i options are given. This option allows for custom rules and settings to be added to the generated makefile.""")

    args = parser.parse_args()

    makefile = "Makefile"
    if os.path.isfile(makefile) and not args.force:
        error("use -f to force overwriting existing {}".format(makefile))

    if args.type == "SHAREDLIB":
        args.compile_for_dll = True

    makemake_dir = os.getcwd()

    # determine, and clean up format of project root dir
    project_dir = args.project_dir
    if not project_dir:
        # try to find project root directory (go up until we find a ".project" file)
        dir = os.getcwd()
        dir = dir.replace("\\", "/")
        while True:
            if os.path.isfile("{}/.project".format(dir)):
                project_dir = dir
                break
            if "/" in dir:
                dir = dir[:dir.rindex("/")]
            else:
                project_dir = "."
                break
    elif not os.path.isdir(project_dir):
        error("specified project directory \"{}\" does not exist".format(project_dir))

    if project_dir:
        project_dir = existing_dir_to_canonical_absolute(project_dir)
        if not same_or_contains(project_dir, makemake_dir):
            error("current directory is not under the given project directory \"{}\"".format(project_dir))

    project_name = os.path.basename(project_dir.rstrip("/\\"))
    target = args.target or project_name

    # target should only be a name, cannot contain relative path
    if "\\" in target or "/" in target:
        error("target (-o option) should only be a name, it cannot contain relative path")

    # recursive and deep do not mix
    if args.is_deep:
        args.recurse = False

    is_windows = bool(os.environ.get('OS')) and 'windows' in os.environ['OS'].lower()

    makecommand = os.environ.get("MAKE") or "make"

    # find Makefile.inc -- apparently not needed
    # result = subprocess.run(['opp_configfilepath'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    # if result.returncode != 0:
    #     error("opp_configfilepath returned nonzero exit code -- make sure it exists and is in the PATH")
    # config_file = result.stdout.strip()
    # if not config_file or not os.path.isfile(config_file):
    #     error("opp_configfilepath didn't return the name of an existing file, result was \"{}\"".format(config_file))

    # determine build output dir (defaults to "out")
    out_root = args.out_dir or "out"
    out_root_abs = out_root if (os.path.isabs(out_root) or not project_dir) else project_dir + "/" + out_root
    out_root_rel = make_relative(out_root_abs, makemake_dir, project_dir)
    out_dir = canonicalize(out_root_rel)

    # determine subpath: the project-relative path of this folder
    subpath = os.path.relpath(makemake_dir, project_dir)
    if subpath == ".":
        subpath = ""  # because the old (perl) opp_makemake does the same

    # collect source files
    if args.is_deep:
        all_excluded_dirs = [out_dir] + args.except_subdirs + args.submake_dirs
        source_dirs = collect_dirs(".", all_excluded_dirs)
        if len(source_dirs) > 10000:
            error("too many subdirs for --deep")
    else:
        source_dirs = ["."] if is_good_dir(".", args.except_subdirs) else []

    cc_files = []
    cpp_files = []
    msg_files = []
    sm_files = []
    ned_files = []

    for f in source_dirs:
        ff = "" if f == "." else f + "/"
        cc_files.extend(sorted_glob(ff + "*.cc"))
        cpp_files.extend(sorted_glob(ff + "*.cpp"))
        msg_files.extend(sorted_glob(ff + "*.msg"))
        sm_files.extend(sorted_glob(ff + "*.sm"))
        ned_files.extend(sorted_glob(ff + "*.ned"))

    backslashed_source_dirs = [f.replace("/", "\\") for f in source_dirs]

    # include dirs and lib dirs (make them relative to the project dir)
    include_dirs = [make_relative(i, makemake_dir, project_dir) for i in args.include_dirs]
    library_dirs = [make_relative(i, makemake_dir, project_dir) for i in args.library_dirs]

    # try to determine if .cc or .cpp files are used
    cc_ext = args.cc_ext
    if not cc_ext:
        if not cc_files and cpp_files:
            cc_ext = "cpp"
        elif cc_files and not cpp_files:
            cc_ext = "cc"
        elif cc_files and cpp_files:
            error("you have both .cc and .cpp files -- specify -e cc or -e cpp option to select which set of files to use")
        else:
            cc_ext = "cc"  # if no files, use .cc extension
    else:
        if cc_ext == "cc" and not cc_files and cpp_files:
            warning("you specified -e cc but you have only .cpp files!")
        if cc_ext == "cpp" and cc_files and not cpp_files:
            warning("you specified -e cpp but you have only .cc files!")

    obj_ext = "o"

    target_prefix = ""
    target_suffix = ""
    if args.type == "EXE":
        target_suffix = "$(EXE_SUFFIX)"
    elif args.type == "SHAREDLIB":
        target_suffix = "$(SHARED_LIB_SUFFIX)"
        target_prefix = "$(LIB_PREFIX)"
    elif args.type == "STATICLIB":
        target_suffix = "$(A_LIB_SUFFIX)"
        target_prefix = "$(LIB_PREFIX)"

    # prepare submakeDirs. First, check that all specified subdirs exist
    for subdir in args.submake_dirs:
        if not os.path.isdir(subdir):
            error("subdirectory '{}' does not exist".format(subdir))

    submake_dirs = args.submake_dirs

    if args.recurse:
        submake_dirs += [f for f in sorted_glob("*") if is_good_dir(f, args.except_subdirs)]

    # create names for subdir targets
    submake_target_names = [re.sub(r"[^a-zA-Z0-9_]", "_", i) for i in submake_dirs]

    # process extraArgs (do ".o" <--> ".obj" translation; NOTE: we don't try to
    # translate library names, because libs are supposed to be given via -L/-l)
    # NOTE2: we need to remove possible quotes (cmd.exe does not do it)
    extra_objs = [i.replace("^'(.*)'$", r"\1").replace(r"\.o(bj)?$", ".objExt") for i in args.extra_args]

    sources = []
    if cc_ext == "cc":
        sources.extend(cc_files)
    if cc_ext == "cpp":
        sources.extend(cpp_files)
    sources.extend(msg_files)
    sources.extend(sm_files)

    objs = ["$O/" + make_derived_file_name(f, obj_ext) for f in sources if not f.startswith("*") and not is_generated_ccfile(f, cc_ext)]

    generated_headers = []

    msg_cc_files = [make_derived_file_name(f, "cc") for f in msg_files]
    msg_h_files = [make_derived_file_name(f, "h") for f in msg_files]
    generated_headers += msg_h_files

    sm_cc_files = [make_derived_file_name(f, "cc") for f in sm_files]
    sm_h_files = [make_derived_file_name(f, "h") for f in sm_files]
    generated_headers += sm_h_files

    # makefrag files
    makefrags = ""
    if args.fragment_files:
        for frag in args.fragment_files:
            makefrags += "-include " + frag + "\n"
    else:
        if os.path.isfile("makefrag"):
            makefrags += "-include makefrag\n"

    # defines
    defines = args.defines
    if args.compile_for_dll and args.dll_symbol:
        defines.append(args.dll_symbol + "_EXPORT")

    deps = ""  # we'll run opp_makedep afterwards

    # XP has 8K limit on line length, so we may have to use the inline file feature of nmake
    approx_linker_line_length = 500 + len(quote_join(objs)) + len(quote_join(extra_objs)) + 2*len(quote_join(args.libraries)) + 2*len(quote_join(args.library_dirs))
    is_long_linker_line = approx_linker_line_length > 8000

    # fill in template variables
    m = {
        "lbrace" : "{",
        "rbrace" : "}",
        "targetprefix" : target_prefix,
        "target" :  target,
        "targetsuffix" : target_suffix,
        "outdir" : out_dir,
        "subpath" : subpath,
        "isdeep" : args.is_deep,
        "progname" : "opp_makemake",
        "args" : " ".join(sys.argv[1:]),
        "cc" : cc_ext,
        "deps" : deps,
        "exe" : args.type == "EXE",
        "sharedlib" : args.type == "SHAREDLIB",
        "staticlib" : args.type == "STATICLIB",
        "nolink" : args.type == "NOLINK",
        "defaultmode" : args.mode,
        "allenv" : not args.user_interface,
        "cmdenv" : args.user_interface.startswith('C'),
        "qtenv" : args.user_interface.startswith('Q'),
        "extraobjs" : quote_join(extra_objs),
        "includepath" : prefix_quote_join(args.include_dirs, "-I"),
        "libpathdirs" : args.library_dirs,
        "libs" : args.libraries,
        "defines" : prefix_quote_join(defines, "-D"),
        "makefilevariables" : args.makefile_variables,
        "makecommand" : makecommand,
        "makefile" : "Makefile",
        "makefrags" : makefrags,
        "msgccfiles" : msg_cc_files,
        "msghfiles" : msg_h_files,
        "msgfiles" : msg_files,
        "smccfiles" : sm_cc_files,
        "smhfiles" : sm_h_files,
        "smfiles" : sm_files,
        "objs" : quote_join(objs),
        "submakedirs" : submake_dirs,
        "submakenames" : submake_target_names,
        "dllsymbol" : args.dll_symbol,
        "sourcedirs" : source_dirs,
        "backslashedsourcedirs" : backslashed_source_dirs,
        "gcclongline" : (is_long_linker_line and is_windows)
    }

    content = substitute_into_template(template(), m, "{", "}")

    existing_content = read_text_file(makefile) if os.path.exists(makefile) else "";

    if content != existing_content:
        print(("Updating" if os.path.exists(makefile) else "Creating") + " " +  makefile + " in " + makemake_dir + "...\n")
        with open(makefile, "w") as f:
            print(content, file=f, end="")

def is_generated_ccfile(fname, ccExt):
    return fname.endswith("_m." + ccExt) or fname.endswith("_sm." + ccExt)

def make_derived_file_name(fname, new_ext):
    base, ext = os.path.splitext(fname)
    if ext == ".msg":
        return base + "_m." + new_ext
    elif ext == ".sm":
        return base + "_sm." + new_ext
    else:
        return base + "." + new_ext

def collect_dirs(dir, except_dirs=None):
    except_dirs = except_dirs or []
    result = []
    if is_good_dir(dir, except_dirs):
        result.append(canonicalize(dir))
        for f in sorted_glob(f"{dir}/*"):
            result.extend(collect_dirs(f, except_dirs))
    return result

def is_good_dir(dirpath, except_dirs=None):
    except_dirs = except_dirs or []
    if not os.path.isdir(dirpath):
        return False

    # skip dot directories, also CVS, SVN, etc aux dirs
    IGNORABLE_DIRS = ["CVS", "RCS", "SCCS", "_darcs", "blib", ".git", ".svn", ".git", ".bzr", ".hg", "backups"]

    dirname = os.path.basename(dirpath)
    if dirname in IGNORABLE_DIRS or (dirname != "." and dirname.startswith(".")):
        return False

    # check exceptdirs. For that, we convert everything to canonical absolute path
    abs_dir = existing_dir_to_canonical_absolute(dirpath)
    for except_dir_pattern in except_dirs:
        for except_dir in sorted_glob(except_dir_pattern):
            if os.path.isdir(except_dir):
                abs_except_dir = existing_dir_to_canonical_absolute(except_dir)
                if abs_dir == abs_except_dir:
                    return False

    return True

def sorted_glob(pattern):
    return sorted(glob.glob(pattern), key=str.casefold)

#
# Performs template substitution. Constructs understood are:
#  - {foo} gets replaced by the value of "foo";
#  - {bar?some text} gets replaced by "some text" if value of "bar" is true*.
#  - {~bar?some text} gets replaced by "some text" if value of "bar" is false*
#  - {bar:} only keep the rest of the line if value of "bar" is true*
#  - {~bar:} only keep the rest of the line if value of "bar" is false*
#  - {@i1:list1,i2:list2,...} ... {i1} ...{/@}  parallel iteration list1, list2 etc.
# * true/false are interpreted as in Perl: "" and "0" are false, everything else is true.
#
# Newlines inside {...} are not permitted; this allows detecting errors caused
# by misplaced braces. Also, nesting is not supported.
#
# Lines starting with ### treated as comments and will be removed from the output
#
def substitute_into_template(template: str, map: dict, start_tag: str = '{', end_tag: str = '}') -> str:
    # remove whole-line comments
    template = re.sub(r'\n[ \t]*###.*\n', '\n', template)
    # remove end-line comments
    template = re.sub(r'[ \t]*###.*\n', '\n', template)

    buf = ""
    start_tag_len = len(start_tag)
    end_tag_len = len(end_tag)

    current = 0
    while True:
        start = template.find(start_tag, current)
        if start == -1:
            break
        else:
            end = template.find(end_tag, start)
            if end != -1:
                end += end_tag_len
                tag = template[start : end]
                #print("processing $tag\n")
                key = template[start + start_tag_len : end - end_tag_len]
                if "\n" in key:
                    raise ValueError("template error: newline inside \"{}\" (misplaced start/end tag?)".format(tag))
                is_loop = key[0] == "@"
                if is_loop:
                    key = key[1:]  # drop "@"
                is_negated = key[0] == "~"
                if is_negated:
                    key = key[1:]  # drop "~"
                is_opt_line = key[-1] == ":" and "?" not in key
                if is_opt_line:
                    key = key[:-1]  # drop trailing ":"
                questionmark_pos = key.find("?")
                substring_after_questionmark = "" if questionmark_pos == -1 else key[questionmark_pos+1:]
                if questionmark_pos != -1:
                    key = key[:questionmark_pos] # drop "?..." from key

                # determine replacement string, and possibly adjust start/end
                replacement = ""
                if is_loop:
                    # basic loop syntax: {@i:list1,j:list2,...} ... {i} ... {/@}
                    # this is parallel iteration, not nested loops!
                    # first, find loop close tag {/@}
                    loop_end_tag = f"{start_tag}/@{end_tag}" # "{/var}"
                    balance = 1
                    pos = end - 1  # because we'll start with +1
                    while balance != 0:
                        pos = index_of_either(template, f"{start_tag}@", loop_end_tag, pos + 1)
                        if pos == -1:
                            error(f"template error: missing loop end marker {loop_end_tag}")
                        is_start_tag = template[pos + start_tag_len : pos + start_tag_len + 1] == "@"
                        balance += 1 if is_start_tag else -1
                    loop_end_pos = pos
                    loop_body = template[end:loop_end_pos]
                    end = loop_end_pos + len(loop_end_tag)
                    # parse loop spec: "i:list1,j:list2,..."
                    loop_vars = []
                    loop_lists = []
                    for loop_spec in key.split(","):
                        match = re.match(r" *([a-zA-Z0-9_]+) *: *([a-zA-Z0-9_]+) *", loop_spec)
                        if not match:
                            error(f"template error: syntax error in loop tag {tag}, {start_tag}@var1:list1,var2:list2,...{end_tag} expected in body")
                        loop_vars.append(match.group(1))
                        loop_lists.append(match.group(2))
                    # execute loop: iterate in parallel on all loop variables
                    length = len(get_from_map_as_list(map, loop_lists[0]))
                    for i in range(length):
                        for j in range(len(loop_vars)):
                            loop_var_j = loop_vars[j]
                            loop_list_j = get_from_map_as_list(map, loop_lists[j])
                            if len(loop_list_j) != length:
                                raise ValueError("template error: list lengths differ in {}".format(tag))
                            map[loop_var_j] = loop_list_j[i]
                        replacement += substitute_into_template(loop_body, map, start_tag, end_tag)

                    # remove loop variables
                    for loop_var in loop_vars:
                        if loop_var in map:
                            del map[loop_var]
                elif is_opt_line:
                    # replacing a whole line
                    condition = get_from_map_as_bool(map, key)
                    if not condition if is_negated else condition:
                        # put line in: all variables OK
                        pass
                    else:
                        # omit line
                        end_line = template.index("\n", end)
                        if end_line == -1:
                            end_line = len(template)
                        replacement = ""
                        end = end_line + 1
                elif questionmark_pos != -1:
                    # conditional
                    replacement = substring_after_questionmark if (get_from_map_as_bool(map, key) != is_negated) else ""
                else:
                    # plain replacement
                    if is_negated:
                        raise ValueError("template error: wrong syntax \"{}\" (possible missing \"?\")".format(tag))
                    replacement = get_from_map_as_string(map, key)

                # do it: replace substring(start, end) with replacement, unless replacement==null
                buf += template[current:start]  # template code up to the {...}
                buf += replacement or ""
                current = end

    buf += template[current:]  # rest of the template
    buf = re.sub(r" +\n", "\n", buf)  # remove spaces at line end
    buf = re.sub(r"\n\n\n+", "\n\n", buf)  # remove multiple empty lines
    return buf

def quote_join(list: List[str]) -> str:
    return prefix_quote_join(list, "")

def prefix_quote_join(list: List[str], prefix: str) -> str:
    sep = " \\\n    " if len(list) > 5 else " "
    result = ""
    for i in list:
        result += sep + prefix + quote(i)
    return result[1:] if result else ""  # chop off leading space

def index_of_either(template: str, substring1: str, substring2: str, from_: int) -> int:
    index1 = template.find(substring1, from_)
    index2 = template.find(substring2, from_)
    return index2 if index1 == -1 else index1 if index2 == -1 else index1 if index1 < index2 else index2

# for substituteIntoTemplate()
def get_from_map_as_string(map: Dict[str, Any], key: str) -> str:
    if key not in map:
        raise Exception("template error: undefined template parameter '" + key + "'")
    return map[key]

# for substituteIntoTemplate()
def get_from_map_as_bool(map: Dict[str, Any], key: str) -> bool:
    if key not in map:
        raise Exception("template error: undefined template parameter '" + key + "'")
    value = map[key]
    return bool(value)  # True if non-empty list or non-empty string, False otherwise

# for substituteIntoTemplate()
def get_from_map_as_list(map, key):
    if key not in map:
        raise KeyError(f"template error: undefined template parameter '{key}'")
    value = map[key]
    if not isinstance(value, list):
        raise TypeError(f"template error: list value expected for template parameter '{key}', got '{value}'")
    return value

#
# Converts path $inputpath to relative path (relative to directory $referencedir),
# provided that both $inputpath and $referencedir are under $projectdir.
# Otherwise it returns the original path.
#
def make_relative(input_path, reference_dir, project_dir=None):
    if not project_dir:
        return input_path
    if same_or_contains(project_dir, input_path) and same_or_contains(project_dir, reference_dir):
        return os.path.relpath(input_path, reference_dir)
    else:
        return input_path

#
# Returns true if the two paths identify the same path in the file system
# or `file`` is in the subtree of `dir`.
#
def same_or_contains(dir, file):
    dir_abs = os.path.abspath(dir)
    file_abs = os.path.abspath(file)
    return os.path.commonpath([file_abs,dir_abs]) == dir_abs

#
# Convert a path to an absolute path in canonical form.
# Path must point to a directory which currently exists.
#
def existing_dir_to_canonical_absolute(dir): #TODO eliminate
    if not os.path.isdir(dir):
        raise ValueError(f"argument must be an existing directory: {dir}")
    return os.path.abspath(dir).replace("\\", "/")

def canonicalize(path):
    return os.path.normpath(path).replace("\\", "/")

def quote(dir):
    if " " in dir:
        dir = f"\"{dir}\""
    return dir

def read_text_file(file):
    with open(file, "r") as f:
        content = f.read()
    return content

def error(text):
    print(f"{progname}: error: {text}", file=sys.stderr)
    sys.exit(1)

def warning(text):
    print(f"{progname}: warning: {text}", file=sys.stderr)

def template():
    #
    # NOTE: the following template must be kept in sync with the file:
    # <omnetpp>/ui/org.omnetpp.cdt/src/org/omnetpp/cdt/makefile/Makefile.TEMPLATE
    #
    return r"""
#
# OMNeT++/OMNEST Makefile for {targetprefix}{target}
#
# This file was generated with the command:
#  {progname} {args}
#

### Some definitions first; note that we only print them if there're going to be needed
{~nolink:}# Name of target to be created (-o option)
{~nolink:}TARGET_DIR = .
{~nolink:}TARGET_NAME = {targetprefix}{target}$(D)
{~nolink:}TARGET = $(TARGET_NAME){targetsuffix}
{~nolink:}TARGET_FILES = $(TARGET_DIR)/$(TARGET)
{~nolink:}
{exe:}# User interface (uncomment one) (-u option)
{exe:}{~allenv?#}USERIF_LIBS = $(ALL_ENV_LIBS) # that is, $(QTENV_LIBS) $(CMDENV_LIBS)
{exe:}{~cmdenv?#}USERIF_LIBS = $(CMDENV_LIBS)
{exe:}{~qtenv?#}USERIF_LIBS = $(QTENV_LIBS)
{exe:}
{sourcedirs:}# C++ include paths (with -I)
{sourcedirs:}INCLUDE_PATH = {includepath}
{sourcedirs:}
{~nolink:}# Additional object and library files to link with
{~nolink:}EXTRA_OBJS = {extraobjs}
{~nolink:}
{~nolink:}{~staticlib:}# Additional libraries (-L, -l options)
{~nolink:}{~staticlib:}LIBS ={@dir:libpathdirs} $(LDFLAG_LIBPATH){dir}{/@} {@lib:libs} -l{lib}{/@}
{~nolink:}{~staticlib:}
# Output directory
### Note: these variables are public API (see help text), don't change
PROJECT_OUTPUT_DIR = {outdir}
PROJECTRELATIVE_PATH = {subpath}
O = $(PROJECT_OUTPUT_DIR)/$(CONFIGNAME)/$(PROJECTRELATIVE_PATH)

{sourcedirs:}# Object files for local .{cc}, .msg and .sm files
{sourcedirs:}OBJS = {objs}
{sourcedirs:}
{sourcedirs:}# Message files
{sourcedirs:}MSGFILES ={@msg:msgfiles} \
{sourcedirs:}    {msg}{/@}
{sourcedirs:}
{sourcedirs:}# SM files
{sourcedirs:}SMFILES ={@sm:smfiles} \
{sourcedirs:}    {sm}{/@}
{sourcedirs:}
{defaultmode:}# Default mode (-M option); can be overridden with make MODE=debug (or =release)
{defaultmode:}ifndef MODE
{defaultmode:}MODE = {defaultmode}
{defaultmode:}endif
{defaultmode:}
{makefilevariables:}# Other makefile variables (-K)
{@d:makefilevariables}{d}
{/@}

#------------------------------------------------------------------------------

# Pull in OMNeT++ configuration (Makefile.inc)

ifneq ("$(OMNETPP_CONFIGFILE)","")
CONFIGFILE = $(OMNETPP_CONFIGFILE)
else
CONFIGFILE = $(shell opp_configfilepath)
endif

ifeq ("$(wildcard $(CONFIGFILE))","")
$(error Config file '$(CONFIGFILE)' does not exist -- add the OMNeT++ bin directory to the path so that opp_configfilepath can be found, or set the OMNETPP_CONFIGFILE variable to point to Makefile.inc)
endif

include $(CONFIGFILE)

{~nolink:}{~staticlib:}# Simulation kernel and user interface libraries
{exe:}OMNETPP_LIBS = $(OPPMAIN_LIB) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)
{sharedlib:}OMNETPP_LIBS = -loppenvir$D $(KERNEL_LIBS) $(SYS_LIBS)
{~nolink:}{~staticlib:}{libpathdirs:}ifneq ($(PLATFORM),win32)
{~nolink:}{~staticlib:}{libpathdirs:}LIBS +={@dir:libpathdirs} -Wl,-rpath,$(abspath {dir}){/@}
{~nolink:}{~staticlib:}{libpathdirs:}endif

{sourcedirs:}COPTS = $(CFLAGS) $(IMPORT_DEFINES) {defines} $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
{sourcedirs:}MSGCOPTS = $(INCLUDE_PATH){dllsymbol? -P}{dllsymbol}{dllsymbol?_API}
{sourcedirs:}SMCOPTS =
{sourcedirs:}
# we want to recompile everything if COPTS changes,
# so we store COPTS into $COPTS_FILE (if COPTS has changed since last build)
# and make the object files depend on it
COPTS_FILE = $O/.last-copts
ifneq ("$(COPTS)","$(shell cat $(COPTS_FILE) 2>/dev/null || echo '')")
  $(shell $(MKPATH) "$O")
  $(file >$(COPTS_FILE),$(COPTS))
endif

{sharedlib:}# On Windows, the target has additional file(s). An import lib and an optional debug symbol file is created too.
{sharedlib:}ifeq ($(PLATFORM),win32)
{sharedlib:}  TARGET_IMPLIB = $(TARGET_NAME)$(IMPLIB_SUFFIX)
{sharedlib:}  TARGET_IMPDEF = $(TARGET_NAME)$(IMPDEF_SUFFIX)
{sharedlib:}  TARGET_FILES+= $(TARGET_DIR)/$(TARGET_IMPLIB)
{sharedlib:}  LDFLAGS+= $(LDFLAG_IMPLIB)$O/$(TARGET_IMPLIB)
{sharedlib:}  OUT_TARGET_EXTRA_FILES = $O/$(TARGET_IMPLIB)
{sharedlib:}  ifeq ($(TOOLCHAIN_NAME),clang-msabi)
{sharedlib:}    ifeq ($(MODE),debug)
{sharedlib:}      TARGET_FILES+=$(TARGET_DIR)/$(TARGET_NAME).pdb
{sharedlib:}    endif
{sharedlib:}  else
{sharedlib:}    TARGET_FILES+= $(TARGET_DIR)/$(TARGET_IMPDEF)
{sharedlib:}    LDFLAGS+= $(LDFLAG_IMPDEF)$O/$(TARGET_IMPDEF)
{sharedlib:}    OUT_TARGET_EXTRA_FILES+= $O/$(TARGET_IMPDEF)
{sharedlib:}  endif
{sharedlib:}endif
{sharedlib:}
#------------------------------------------------------------------------------
# User-supplied makefile fragment(s)
{makefrags:}{makefrags}
#------------------------------------------------------------------------------

# Main target
{~nolink:}all: $(TARGET_FILES)
{~nolink:}
### Rules for $TARGET. Note that end product will be hardlinked into the
### TARGET_DIR (by default, the Makefile's directory); on systems that don't
### support soft links it will be copied.

### Copy binaries to their final destination from the out directory
$(TARGET_DIR)/% :: $O/%
	@mkdir -p $(TARGET_DIR)
	$(Q)$(LN) $< $@
ifeq ($(TOOLCHAIN_NAME),clang-msabi)
	-$(Q)-$(LN) $(<:%.dll=%.lib) $(@:%.dll=%.lib) 2>/dev/null

$O/$(TARGET_NAME).pdb: $O/$(TARGET)
endif

{exe:}$O/$(TARGET): {sourcedirs?$(OBJS)} {submakedirs?submakedirs} $(wildcard $(EXTRA_OBJS)) {makefile} $(CONFIGFILE)
{exe:}	@$(MKPATH) $O
{exe:}	@echo Creating executable: $@
{gcclongline:}{exe:}	$(Q)echo >.tmp$$$$ {sourcedirs?$(OBJS)} $(EXTRA_OBJS) && $(CXX) -o $O/$(TARGET) @.tmp$$$$ $(AS_NEEDED_OFF) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS) $(LDFLAGS) ; rm .tmp$$$$
{~gcclongline:}{exe:}	$(Q)$(CXX) $(LDFLAGS) -o $O/$(TARGET) {sourcedirs?$(OBJS)} $(EXTRA_OBJS) $(AS_NEEDED_OFF) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS)
{sharedlib:}$O/$(TARGET) $(OUT_TARGET_EXTRA_FILES) &: {sourcedirs?$(OBJS)} {submakedirs?submakedirs} $(wildcard $(EXTRA_OBJS)) {makefile} $(CONFIGFILE)
{sharedlib:}	@$(MKPATH) $O
{sharedlib:}	@echo Creating shared library: $@
{gcclongline:}{sharedlib:}	$(Q)echo >.tmp$$$$ {sourcedirs?$(OBJS)} $(EXTRA_OBJS) && $(SHLIB_LD) -o $O/$(TARGET) @.tmp$$$$ $(AS_NEEDED_OFF) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS) $(LDFLAGS) ; rm .tmp$$$$
{~gcclongline:}{sharedlib:}	$(Q)$(SHLIB_LD) -o $O/$(TARGET) {sourcedirs?$(OBJS)} $(EXTRA_OBJS) $(AS_NEEDED_OFF) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS) $(LDFLAGS)
{sharedlib:}	$(Q)$(SHLIB_POSTPROCESS) $O/$(TARGET)
{sharedlib:}ifeq ($(PLATFORM),win32)
{sharedlib:}	$(Q)llvm-ar d $O/$(TARGET_IMPLIB) $(TARGET) # WORKAROUND: throw away the first file from the archive to make the LLD generated import lib valid
{sharedlib:}endif
{staticlib:}$O/$(TARGET): {sourcedirs?$(OBJS)} {submakedirs?submakedirs} $(wildcard $(EXTRA_OBJS)) {makefile} $(CONFIGFILE)
{staticlib:}	@$(MKPATH) $O
{staticlib:}	@echo Creating static library: $@
{gcclongline:}{staticlib:}	$(Q)echo >.tmp$$$$ {sourcedirs?$(OBJS)} $(EXTRA_OBJS) && $(AR_CR) $O/$(TARGET) @.tmp$$$$ && rm .tmp$$$$
{~gcclongline:}{staticlib:}	$(Q)$(AR_CR) $O/$(TARGET) {sourcedirs?$(OBJS)} $(EXTRA_OBJS)
{nolink:}all: {sourcedirs?$(OBJS)} {submakedirs?submakedirs} {makefile} $(CONFIGFILE)
{nolink:}	@# Do nothing

{submakedirs:}submakedirs: {@i:submakenames} {i}_dir{/@}
{submakedirs:}
.PHONY: all clean cleanall depend msgheaders smheaders {@i:submakenames} {i}{/@}
{@i:submakenames}{i}: {i}_dir
{/@}
{submakedirs:}
{@i:submakenames,dir:submakedirs}{i}_dir:
	cd {dir} && $(MAKE) all

{/@}

{sourcedirs:}# disabling all implicit rules
{sourcedirs:}.SUFFIXES :
{sourcedirs:}.PRECIOUS : %_m.h %_m.{cc}
{sourcedirs:}
### Pattern rules for cc files.
{sourcedirs:}$O/%.o: %.{cc} $(COPTS_FILE) | msgheaders smheaders
{sourcedirs:}	@$(MKPATH) $(dir $@)
{sourcedirs:}	$(qecho) "$<"
{sourcedirs:}	$(Q)$(CXX) -c $(CXXFLAGS) $(COPTS) -o $@ $<
{@dir:sourcedirs,bsdir:backslashedsourcedirs}
{/@}
### Pattern rules for msg files.
{sourcedirs:}%_m.{cc} %_m.h: %.msg
{sourcedirs:}	$(qecho) MSGC: $<
{sourcedirs:}	$(Q)$(MSGC) -s _m.{cc} -MD -MP -MF $O/$(basename $<)_m.h.d $(MSGCOPTS) $?
{sourcedirs:}
{@msg:msgfiles,m_cc:msgccfiles,m_h:msghfiles}
{/@}
### Pattern rules for sm files.
{sourcedirs:}%_sm.{cc} %_sm.h: %.sm
{sourcedirs:}	$(qecho) SMC: $<
{sourcedirs:}	$(Q)$(SMC) -c++ -suffix {cc} $(SMCOPTS) $?
{sourcedirs:}
{@sm:smfiles,sm_cc:smccfiles,sm_h:smhfiles}
{/@}

### Utility target for running opp_msgc; otherwise unused by this makefile
msgheaders: {sourcedirs?$(MSGFILES:.msg=_m.h)}
{@i:submakedirs}	$(Q)cd {i} && $(MAKE) msgheaders
{/@}

### Utility target for running the SMC compiler; otherwise unused by this makefile
smheaders: {sourcedirs?$(SMFILES:.sm=_sm.h)}
{@i:submakedirs}	$(Q)cd {i} && $(MAKE) smheaders
{/@}

### clean, depend, etc.
clean:
	$(qecho) Cleaning $(TARGET)
	$(Q)-rm -rf $O  ### must be done separately, because it fails on MinGW ('rm' is bogus)
{~nolink:}	$(Q)-rm -f $(TARGET_FILES)
	$(Q)-rm -f $(call opp_rwildcard, . , *_m.{cc} *_m.h *_sm.{cc} *_sm.h)
{@i:submakedirs}	-$(Q)cd {i} && $(MAKE) clean
{/@}

cleanall:
	$(Q)$(CLEANALL_COMMAND)
	$(Q)-rm -rf $(PROJECT_OUTPUT_DIR)

help:
	@echo "$$HELP_SYNOPSYS"
	@echo "$$HELP_TARGETS"
	@echo "$$HELP_VARIABLES"
	@echo "$$HELP_EXAMPLES"

# include all dependencies
-include $(OBJS:%=%.d) $(MSGFILES:%.msg=$O/%_m.h.d)
""".lstrip()

makemake()