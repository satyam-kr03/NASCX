#####################################################################
# OMNeT++ INI for Stage 2 (INET integration)
# - Default: runs src.srcNetworkINET (your app-only network)
# - Extra:  [Config WifiUdp]  = tiny 802.11 UDP sanity test
#          [Config WifiGdfUdp]= GDF-driven UDP over Wi-Fi (NEW)
#####################################################################

[General]
ned-path = /home/satyam/omnet/xrsimu5g/src
sim-time-limit = 1000s

# ================== Your Stage-2 app network ==================
[Config AppNet]
network = src.srcNetworkINET

*.playgroundSizeX = 800m
*.playgroundSizeY = 400m

*.visualizer.*.enabled = true
*.visualizer.sceneVisualizer.zIndex = 10
*.visualizer.mobilityVisualizer.displayMovementTrails = true
*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.animationSpeed = 1
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.physicalLinkVisualizer.packetFilter = "*"

# Source UE
*.src.gdfFile = "simulations/gdf/input.gdf"
*.src.sendInterval = 0.02s
*.src.app.endWhenDone = true
*.src.mobility.typename = "RandomWaypointMobility"
*.src.mobility.initFromDisplayString = false
*.src.mobility.startTime = 0s
*.src.mobility.updateInterval = 0.2s
*.src.mobility.waitTime = 0s
*.src.mobility.speed = 2mps
*.src.mobility.initializationBoundary = rectangle(0m,0m, 800m,400m)
*.src.mobility.constraintAreaMinX = 0m
*.src.mobility.constraintAreaMinY = 0m
*.src.mobility.constraintAreaMaxX = 800m
*.src.mobility.constraintAreaMaxY = 400m
*.src.mobility.constraintAreaMinZ = 0m
*.src.mobility.constraintAreaMaxZ = 0m

# gNodeB
*.gnb.numReceivers   = 1
*.gnb.broadcastDelay = 1ms
*.gnb.ackTimeout     = 50ms
*.gnb.mobility.typename = "StationaryMobility"
*.gnb.mobility.startTime = 0s
*.gnb.mobility.initialX  = 400m
*.gnb.mobility.initialY  = 200m
*.gnb.mobility.constraintAreaMinZ = 0m
*.gnb.mobility.constraintAreaMaxZ = 0m

# Receiver UE
*.rx0.id = 0
*.rx0.logFile = "simulations/gdf/output_RX0.gdf"
*.rx0.mobility.typename = "RandomWaypointMobility"
*.rx0.mobility.initFromDisplayString = false
*.rx0.mobility.startTime = 0s
*.rx0.mobility.updateInterval = 0.2s
*.rx0.mobility.waitTime = 0s
*.rx0.mobility.speed = 2mps
*.rx0.mobility.initializationBoundary = rectangle(0m,0m, 800m,400m)
*.rx0.mobility.constraintAreaMinX = 0m
*.rx0.mobility.constraintAreaMinY = 0m
*.rx0.mobility.constraintAreaMaxX = 800m
*.rx0.mobility.constraintAreaMaxY = 400m
*.rx0.mobility.constraintAreaMinZ = 0m
*.rx0.mobility.constraintAreaMaxZ = 0m

# ================== (kept for reference, disabled) Ping smoke test ==================
[Config _Disabled_WifiSmoke]
network = src.WifiSmokeTest
sim-time-limit = 30s

*.h1.numWlanInterfaces = 1
*.h2.numWlanInterfaces = 1
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
**.wlan[0].mgmt.ssid = "smoke"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"
**.wlan[0].agent.typename = ""
**.wlan[0].radio.channelNumber = 1
*.configurator.addStaticRoutes = false
*.configurator.addDefaultRoutes = false
*.h1.mobility.typename = "StationaryMobility"
*.h1.mobility.initialX = 300m
*.h1.mobility.initialY = 200m
*.h2.mobility.typename = "StationaryMobility"
*.h2.mobility.initialX = 600m
*.h2.mobility.initialY = 200m
*.h1.numApps = 1
*.h1.app[0].typename  = "PingApp"
*.h1.app[0].destAddr  = "h2"
*.h1.app[0].startTime = 0.5s
*.h1.app[0].stopTime  = 10s
*.h2.numApps = 0
*.visualizer.*.enabled = true
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.packetDropVisualizer.displayPacketDrops = true
*.visualizer.dataLinkVisualizer.displayLinks = true

# ================== Wi-Fi UDP one-way test (ACTIVE) ==================
[Config WifiUdp]
network = src.WifiSmokeTest
sim-time-limit = 15s

# Positions
*.h1.mobility.typename = "StationaryMobility"
*.h1.mobility.initialX = 300m
*.h1.mobility.initialY = 200m
*.h2.mobility.typename = "StationaryMobility"
*.h2.mobility.initialX = 600m
*.h2.mobility.initialY = 200m

# One WLAN per host
*.h1.numWlanInterfaces = 1
*.h2.numWlanInterfaces = 1

# 802.11 ad-hoc
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
**.wlan[0].mgmt.ssid = "smoke"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"
**.wlan[0].agent.typename = ""
**.wlan[0].radio.channelNumber = 1
# **.wlan[0].mac.opMode = "g(54Mbps)"   # enable only if your INET build needs it

# IPv4
*.configurator.addStaticRoutes = false
*.configurator.addDefaultRoutes = false

# UDP apps: h1 -> h2
*.h1.numApps = 1
*.h1.app[0].typename      = "UdpBasicApp"
*.h1.app[0].destAddresses = "h2"
*.h1.app[0].destPort      = 5000
*.h1.app[0].messageLength = 1000B
*.h1.app[0].sendInterval  = 0.1s
*.h1.app[0].startTime     = 1s
*.h1.app[0].stopTime      = 25s

*.h2.numApps = 1
*.h2.app[0].typename = "UdpSink"
*.h2.app[0].localPort = 5000

# Visuals
*.visualizer.*.enabled = true
*.visualizer.dataLinkVisualizer.displayLinks = true
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.packetDropVisualizer.displayPacketDrops = true

# Recording (lightweight)
*.h1.app[0].statistic-recording = true
*.h1.app[0].sentPk:count.record  = true
*.h1.app[0].sentBytes:sum.record = true
*.h2.app[0].statistic-recording = true
*.h2.app[0].rcvdPk:count.record  = true
*.h2.app[0].rcvdBytes:sum.record = true
**.wlan[*].**.result-recording-modes = -vector
record-eventlog = false

# ================== Wi-Fi GDF-driven UDP (NEW) ==================
[Config WifiGdfUdp]
network = src.WifiSmokeTest
sim-time-limit = 100000s

# Radio & addressing
*.h1.numWlanInterfaces = 1
*.h2.numWlanInterfaces = 1
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
**.wlan[0].mgmt.ssid = "smoke"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"
**.wlan[0].agent.typename = ""
**.wlan[0].radio.channelNumber = 1
*.configurator.addStaticRoutes = false
*.configurator.addDefaultRoutes = false

# Static positions
*.h1.mobility.typename = "StationaryMobility"
*.h1.mobility.initialX = 300m
*.h1.mobility.initialY = 200m
*.h2.mobility.typename = "StationaryMobility"
*.h2.mobility.initialX = 600m
*.h2.mobility.initialY = 200m

# ---- GDF apps ----
*.h1.numApps = 1
*.h1.app[0].typename   = "src.GdfUdpSourceApp"     # package 'src'
*.h1.app[0].inputFile  = "simulations/gdf/input.gdf"
*.h1.app[0].destAddr   = "h2"
*.h1.app[0].destPort   = 5000
*.h1.app[0].localPort  = -1
*.h1.app[0].stopWhenDone = true
*.h1.app[0].stopGrace    = 0.2s     # you can tweak this

*.h2.numApps = 1
*.h2.app[0].typename   = "src.GdfUdpSinkApp"       # package 'src'
*.h2.app[0].localPort  = 5000
*.h2.app[0].outputFile = "simulations/gdf/output_RX0.gdf"

# Optional: enable the alternate idle-stop on the sink
*.h2.app[0].stopWhenIdle = true
*.h2.app[0].idleGrace    = 5s

# KPIs
*.h1.app[0].statistic-recording = true
*.h1.app[0].sentPk:count.record  = true
*.h1.app[0].sentBytes:sum.record = true
*.h2.app[0].statistic-recording  = true
*.h2.app[0].rcvdPk:count.record  = true
*.h2.app[0].rcvdBytes:sum.record = true

# Keep 802.11 internals light
**.wlan[*].**.result-recording-modes = -vector
record-eventlog = false
